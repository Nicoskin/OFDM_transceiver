#include "../ofdm_mod.h"
#include "../fft/fft.h"
#include <iostream>

// g++ test.cpp ../ofdm_mod.cpp ../fft/fft.cpp -o test && ./test

int main() {
    // Создание объекта OFDM
    OFDM_mod ofdm;

    // Пример входных данных (комплексные значения квадратур)
    // std::vector<std::vector<std::complex<double>>> input_matrix = {
    //     {{-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}}};

    std::vector<std::vector<std::complex<double>>> input_matrix = {
        {{-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {-0.707, -0.707}}};

    //auto mapped_pss = ofdm.mapPSS();
    ofdm.modulate(input_matrix);
    // Обработка входных данных
    //std::vector<std::complex<double>> output = ofdm.modulate(input_matrix);

    // Печать выходных данных
    // for (const auto &val : output) {
    //     std::cout << val << ",\n";
    // }


    std::cout << "data_indices" << std::endl;
    for (const auto &val : ofdm.data_indices) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "pilot_indices" << std::endl;
    for (const auto &val : ofdm.pilot_indices) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    return 0;
}
