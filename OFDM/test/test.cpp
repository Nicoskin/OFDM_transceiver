#include "../ofdm_mod.h"
#include "../fft/fft.h"
#include <iostream>

// g++ --std c++20 test.cpp ../ofdm_mod.cpp ../fft/fft.cpp -o test && ./test

int main() {
    // Параметры OFDM
    int N_FFT = 128;
    int G_subcar = 55;
    int N_PILOTS = 6;
    int CP_LEN = 16;

    // Создание объекта OFDM
    OFDM ofdm(N_FFT, G_subcar, N_PILOTS, CP_LEN);

    // Пример входных данных (комплексные значения квадратур)
    std::vector<std::vector<std::complex<double>>> input_matrix = {
        {{0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, 0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {-0.707, 0.707}, {-0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {-0.707, 0.707}, {0.707, 0.707}, {-0.707, -0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {-0.707, -0.707}, {-0.707, -0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, 0.707}, {0.707, -0.707}, {0.707, -0.707}, {0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {0.707, -0.707}, {-0.707, 0.707}, {-0.707, 0.707},
    }};

    auto PSS = ofdm.ZadoffChu(true);
    auto mapped_pss = ofdm.mapPSS(PSS);

    // Обработка входных данных
    std::vector<std::complex<double>> output = ofdm.process(input_matrix);

    // Печать выходных данных
    for (const auto &val : output) {
        std::cout << val << ",\n";
    }

    return 0;
}
